{"version":3,"sources":["serviceWorker.js","components/Counter.jsx","components/Counters.jsx","components/NavBar.jsx","components/App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Counter","styles","fontSize","fontWeight","decrementCount","props","_this","counterObj","value","updateValueMethod","id","incrementCount","this","classes","_this2","react_default","a","createElement","Fragment","className","onClick","style","getBadgeClasses","formatCount","marginLeft","removeCounterMethod","Component","Counters","state","counters","updateValue","newCounters","map","item","setState","addCounter","counter","concat","Object","toConsumableArray","setNumberOfCounters","length","removeCounter","filter","components_Counter","key","UUID","v4","NavBar","href","numberOfCounters","App","number","components_NavBar","components_Counters","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f799922b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  styles = {\r\n    fontSize: 15,\r\n    fontWeight: \"bold\"\r\n  };\r\n\r\n  formatCount() {\r\n    const { value } = this.props.counterObj;\r\n    return value === 0 ? \"Zero\" : value;\r\n  }\r\n\r\n  decrementCount = props => {\r\n    if (this.props.counterObj.value !== 0) {\r\n      this.props.updateValueMethod(\r\n        this.props.counterObj.id,\r\n        this.props.counterObj.value - 1\r\n      );\r\n    }\r\n  };\r\n\r\n  incrementCount = props => {\r\n    this.props.updateValueMethod(\r\n      this.props.counterObj.id,\r\n      this.props.counterObj.value + 1\r\n    );\r\n  };\r\n\r\n  getBadgeClasses() {\r\n    let classes = \"badge m-2 \";\r\n    classes +=\r\n      this.props.counterObj.value === 0 ? \"badge-warning\" : \"badge-primary\";\r\n    return classes;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <button\r\n          className=\"btn btn-secondary btn-sm\"\r\n          onClick={this.decrementCount}\r\n        >\r\n          Decrement\r\n        </button>\r\n        <span style={this.styles} className={this.getBadgeClasses()}>\r\n          {this.formatCount()}\r\n        </span>\r\n        <button\r\n          className=\"btn btn-secondary btn-sm\"\r\n          onClick={this.incrementCount}\r\n        >\r\n          Increment\r\n        </button>\r\n        <button\r\n          className=\"btn btn-danger btn-sm\"\r\n          style={{ marginLeft: \"20px\" }}\r\n          onClick={() =>\r\n            this.props.removeCounterMethod(this.props.counterObj.id)\r\n          }\r\n        >\r\n          Remove Counter\r\n        </button>\r\n        <br />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./Counter\";\r\nimport UUID from \"node-uuid\";\r\n\r\nclass Counters extends Component {\r\n  state = {\r\n    counters: []\r\n  };\r\n\r\n  updateValue = (id, value) => {\r\n    const newCounters = this.state.counters.map(item => {\r\n      if (item.id === id) {\r\n        item.value = value;\r\n      }\r\n      return item;\r\n    });\r\n    this.setState({\r\n      counters: newCounters\r\n    });\r\n  };\r\n\r\n  addCounter = counter => {\r\n    this.setState({ counters: [...this.state.counters, counter] });\r\n    this.props.setNumberOfCounters(this.state.counters.length + 1);\r\n  };\r\n\r\n  removeCounter = id => {\r\n    this.setState({\r\n      counters: this.state.counters.filter(item => {\r\n        return item.id !== id;\r\n      })\r\n    });\r\n    this.props.setNumberOfCounters(this.state.counters.length - 1);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        {this.state.counters.map(counter => (\r\n          <Counter\r\n            key={counter.id}\r\n            counterObj={counter}\r\n            removeCounterMethod={this.removeCounter}\r\n            updateValueMethod={this.updateValue}\r\n          />\r\n        ))}\r\n        <br />\r\n        <button\r\n          className=\"btn btn-primary btn-md\"\r\n          onClick={() =>\r\n            this.addCounter({\r\n              id: UUID.v4(),\r\n              value: 0\r\n            })\r\n          }\r\n        >\r\n          Add Counter\r\n        </button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React from \"react\";\r\n\r\nconst NavBar = props => {\r\n  return (\r\n    <nav className=\"navbar navbar-light bg-light\">\r\n      <div href=\"#\" className=\"navbar-brand\">\r\n        Number of Counters:{\" \"}\r\n        <span className=\"badge badge-pill badge-secondary\">\r\n          {props.numberOfCounters}\r\n        </span>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\nimport Counters from \"./Counters\";\r\nimport NavBar from \"./NavBar\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    numberOfCounters: 0\r\n  };\r\n\r\n  setNumberOfCounters = number => {\r\n    this.setState({ numberOfCounters: number });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <NavBar numberOfCounters={this.state.numberOfCounters} />\r\n        <main className=\"container\">\r\n          <Counters setNumberOfCounters={this.setNumberOfCounters} />\r\n        </main>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./components/App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}